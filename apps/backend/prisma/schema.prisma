// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  createdAt    DateTime
  updatedAt    DateTime
  sessions     Session[]
  accounts     Account[]
  comments     Comment[]
  interactions CommentInteraction[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model RateLimit {
  id          String @id
  key         String
  count       Int
  lastRequest BigInt

  @@map("rateLimit")
}

enum InstallationSettingName {
  IS_FIRST_SETUP_COMPLETED
  ALLOW_NEW_COMMENTS
  ALLOW_COMMENT_UPDATES
  ALLOW_COMMENT_DELETION
  ALLOW_COMMENT_INTERACTIONS
}

model InstallationSettings {
  id    String                  @id @default(cuid(2))
  name  InstallationSettingName @unique
  value Json

  @@map("installation_settings")
}

model Website {
  id                    String   @id @default(cuid(2))
  name                  String   @unique
  url                   String   @unique
  description           String?
  page_identifier_rules Json
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  comments Comment[]

  @@map("website")
}

model Comment {
  id              String   @id @default(cuid(2))
  page_identifier String
  content         String
  author_id       String
  website_id      String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  author       User                 @relation(fields: [author_id], references: [id], onDelete: Cascade)
  website      Website              @relation(fields: [website_id], references: [id], onDelete: Cascade)
  interactions CommentInteraction[]

  @@map("comment")
}

enum InteractionType {
  LIKE
  DISLIKE
  REPORT
}

model CommentInteraction {
  comment_id String
  user_id    String
  type       InteractionType
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt

  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([comment_id, user_id])
  @@index([comment_id])
  @@index([type])
  @@map("comment_interaction")
}
